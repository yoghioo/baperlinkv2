(function(window,undefined){var_window:window,_document = _window.document,_navigator = _window.navigator,_setTimeout = _window.setTimeout,_clearTimeout = _window.clearTimeout,_setInterval = _window.setInterval,_clearInterval = _window.clearInterval,_getComputedStyle = _window.getComputedStyle,_encodeURIComponent = _window.encodeURIComponent,_ActiveXObject = _window.ActiveXObject,_Error = _window.Error,_parseInt = _window.Number.parseInt || _window.parseInt,_parseFloat = _window.Number.parseFloat || _window.parseFloat,_isNaN = _window.Number.isNaN || _window.isNaN,_now = _window.Date.now,_keys = _window.Object.keys,_defineProperty = _window.Object.defineProperty,_hasOwn = _window.Object.prototype.hasOwnProperty,_slice = _window.Array.prototype.slice,_unwrap = function() { var unwrapper = function(el) { return el};
if (typeof _window.wrap === function && typeof _window.unwrap === function){tryvardiv:_document.createElement(div);varunwrappeddiv:_window.unwrap(div);ifdivnodetype:== 1 && unwrappedDiv && unwrappedDiv.nodeType === 1) { unwrapper = _window.unwrap};
/**
* Shallow-copy the owned,enumerable properties of one object over to another,similar to jQuery's `$.extend`.\A *\A * @returns The target object, augmented\A * @private\A */\A  var _extend = function() {\A    var i, len, arg, prop, src, copy, args = _args(arguments), target = args[0] || {};\A    for (i = 1, len = args.length; i < len; i++) {\A      if ((arg = args[i]) != null) {\A        for (prop in arg) {\A          if (_hasOwn.call(arg, prop)) {\A            src = target[prop];\A            copy = arg[prop];\A            if (target !== copy && copy !== undefined) {\A              target[prop] = copy;\A            }\A          }\A        }\A      }\A    }\A    return target;\A  };\A  /**\A * Return a deep copy of the source object or array.\A *\A * @returns Object or Array\A * @private\A */\A  var _deepCopy = function(source) {\A    var copy, i, len, prop;\A    if (typeof source !== "object" || source == null || typeof source.nodeType === "number") {\A      copy = source;\A    } else if (typeof source.length === "number") {\A      copy = [];\A      for (i = 0, len = source.length; i < len; i++) {\A        if (_hasOwn.call(source, i)) {\A          copy[i] = _deepCopy(source[i]);\A        }\A      }\A    } else {\A      copy = {};\A      for (prop in source) {\A        if (_hasOwn.call(source, prop)) {\A          copy[prop] = _deepCopy(source[prop]);\A        }\A      }\A    }\A    return copy;\A  };\A  /**\A * Makes a shallow copy of `obj` (like `_extend`) but filters its properties based on a list of `keys` to keep.\A * The inverse of `_omit`, mostly. The big difference is that these properties do NOT need to be enumerable to\A * be kept.\A *\A * @returns A new filtered object.\A * @private\A */\A  var _pick = function(obj, keys) {\A    var newObj = {};\A    for (var i = 0, len = keys.length; i < len; i++) {\A      if (keys[i] in obj) {\A        newObj[keys[i]] = obj[keys[i]];\A      }\A    }\A    return newObj;\A  };\A  /**\A * Makes a shallow copy of `obj` (like `_extend`) but filters its properties based on a list of `keys` to omit.\A * The inverse of `_pick`.\A *\A * @returns A new filtered object.\A * @private\A */\A  var _omit = function(obj, keys) {\A    var newObj = {};\A    for (var prop in obj) {\A      if (keys.indexOf(prop) === -1) {\A        newObj[prop] = obj[prop];\A      }\A    }\A    return newObj;\A  };\A  /**\A * Remove all owned, enumerable properties from an object.\A *\A * @returns The original object without its owned, enumerable properties.\A * @private\A */\A  var _deleteOwnProperties = function(obj) {\A    if (obj) {\A      for (var prop in obj) {\A        if (_hasOwn.call(obj, prop)) {\A          delete obj[prop];\A        }\A      }\A    }\A    return obj;\A  };\A  /**\A * Determine if an element is contained within another element.\A *\A * @returns Boolean\A * @private\A */\A  var _containedBy = function(el, ancestorEl) {\A    if (el && el.nodeType === 1 && el.ownerDocument && ancestorEl && (ancestorEl.nodeType === 1 && ancestorEl.ownerDocument && ancestorEl.ownerDocument === el.ownerDocument || ancestorEl.nodeType === 9 && !ancestorEl.ownerDocument && ancestorEl === el.ownerDocument)) {\A      do {\A        if (el === ancestorEl) {\A          return true;\A        }\A        el = el.parentNode;\A      } while (el);\A    }\A    return false;\A  };\A  /**\A * Get the URL path's parent directory.
*
* @returns String or `undefined`
* @private
*/
var _getDirPathOfUrl = function(url){iftypeofurl:== string && url) { dir = url.split(#)[0].split(?)[0];dir:url.slice(0,url.lastIndexOf(/) + 1)}catch (e){err:e}if (err){url:err.sourceURL || err.fileName || _getCurrentScriptUrlFromErrorStack(err.stack)}
